white(j,i)
}
}
}
}
playchess = function(){
initialize_board()
n = 1
resign = FALSE
while(!resign){
b = ""
w = ""
if(round((n/2),0) != n/2){
b = as.character(readline(prompt = "Where do you want to put your black?: "))
x = as.numeric(unlist(strsplit(b,","))[1])
y = as.numeric(unlist(strsplit(b,","))[2])
board[x,y] = 1
}else if(round((n/2),0) == n/2){
w = as.character(readline(prompt = "Where do you want to put your white?: "))
x = as.numeric(unlist(strsplit(w,","))[1])
y = as.numeric(unlist(strsplit(w,","))[2])
board[x,y] = 2
}
updateboard()
n = n + 1
if(any(b == "resign", w == "resign")){
resign = TRUE
}
}
}
chessboard
chessboard()
initialize_board()
board[4,4] = 1
updateboard()
initialize_board = function(){
board = vector()
for(i in 1:19){
board = cbind(board, rep(0,19))
}
board <<- as.matrix(board)
}
chessboard = function(){
windows()
par(bg = 'chocolate3')
for(i in 1:19){
plot(as.matrix(cbind(i,seq(1,19,1))),
xlim = c(1,19),
ylim = c(1,19),
xlab = " ",
ylab = " ",
type = "l",
xaxt = "n",
yaxt = "n",
ann = FALSE)
par(new = TRUE)
}
for(i in 1:19){
plot(as.matrix(cbind(seq(1,19,1),i)),
xlim = c(1,19),
ylim = c(1,19),
xlab = " ",
ylab = " ",
type = "l",
xaxt = "n",
yaxt = "n",
ann = FALSE)
par(new = TRUE)
}
points(4,4, pch = 16)
points(4,10, pch = 16)
points(4,16, pch = 16)
points(10,4, pch = 16)
points(10,10, pch = 16)
points(10,16, pch = 16)
points(16,4, pch = 16)
points(16,10, pch = 16)
points(16,16, pch = 16)
}
white = function(x,y){
points(x,y,
cex = 3,
pch = 16,
col = "white")
}
black = function(x,y){
points(x,y,
cex = 3,
pch = 16,
col = "black")
}
updateboard = function(){
chessboard()
for(i in 1:19){
for(j in 1:19){
if(board[j,i] == 1){
black(j,i)
}else if(board[j,i] == 2){
white(j,i)
}
}
}
}
playchess = function(){
initialize_board()
n = 1
resign = FALSE
while(!resign){
b = ""
w = ""
if(round((n/2),0) != n/2){
b = as.character(readline(prompt = "Where do you want to put your black?: "))
x = as.numeric(unlist(strsplit(b,","))[1])
y = as.numeric(unlist(strsplit(b,","))[2])
board[x,y] = 1
}else if(round((n/2),0) == n/2){
w = as.character(readline(prompt = "Where do you want to put your white?: "))
x = as.numeric(unlist(strsplit(w,","))[1])
y = as.numeric(unlist(strsplit(w,","))[2])
board[x,y] = 2
}
updateboard()
n = n + 1
if(any(b == "resign", w == "resign")){
resign = TRUE
}
}
}
playchess()
initialize_board = function(){
board = vector()
for(i in 1:19){
board = cbind(board, rep(0,19))
}
board <<- as.matrix(board)
}
chessboard = function(){
windows()
par(bg = 'chocolate3')
for(i in 1:19){
plot(as.matrix(cbind(i,seq(1,19,1))),
xlim = c(1,19),
ylim = c(1,19),
xlab = " ",
ylab = " ",
type = "l",
xaxt = "n",
yaxt = "n",
ann = FALSE)
par(new = TRUE)
}
for(i in 1:19){
plot(as.matrix(cbind(seq(1,19,1),i)),
xlim = c(1,19),
ylim = c(1,19),
xlab = " ",
ylab = " ",
type = "l",
xaxt = "n",
yaxt = "n",
ann = FALSE)
par(new = TRUE)
}
points(4,4, pch = 16)
points(4,10, pch = 16)
points(4,16, pch = 16)
points(10,4, pch = 16)
points(10,10, pch = 16)
points(10,16, pch = 16)
points(16,4, pch = 16)
points(16,10, pch = 16)
points(16,16, pch = 16)
}
white = function(x,y){
points(x,y,
cex = 3,
pch = 16,
col = "white")
}
black = function(x,y){
points(x,y,
cex = 3,
pch = 16,
col = "black")
}
updateboard = function(){
chessboard()
for(i in 1:19){
for(j in 1:19){
if(board[j,i] == 1){
black(j,i)
}else if(board[j,i] == 2){
white(j,i)
}
}
}
}
playchess = function(){
initialize_board()
n = 1
resign = FALSE
while(!resign){
b = ""
w = ""
if(round((n/2),0) != n/2){
b = as.character(readline(prompt = "Where do you want to put your black?: "))
x = as.numeric(unlist(strsplit(b,","))[1])
y = as.numeric(unlist(strsplit(b,","))[2])
board[x,y] = 1
}else if(round((n/2),0) == n/2){
w = as.character(readline(prompt = "Where do you want to put your white?: "))
x = as.numeric(unlist(strsplit(w,","))[1])
y = as.numeric(unlist(strsplit(w,","))[2])
board[x,y] = 2
}
n = n + 1
if(any(b == "resign", w == "resign")){
resign = TRUE
}
}
updateboard()
}
playchess()
initialize_board = function(){
board = vector()
for(i in 1:19){
board = cbind(board, rep(0,19))
}
board <<- as.matrix(board)
}
chessboard = function(){
windows()
par(bg = 'chocolate3')
for(i in 1:19){
plot(as.matrix(cbind(i,seq(1,19,1))),
xlim = c(1,19),
ylim = c(1,19),
xlab = " ",
ylab = " ",
type = "l",
xaxt = "n",
yaxt = "n",
ann = FALSE)
par(new = TRUE)
}
for(i in 1:19){
plot(as.matrix(cbind(seq(1,19,1),i)),
xlim = c(1,19),
ylim = c(1,19),
xlab = " ",
ylab = " ",
type = "l",
xaxt = "n",
yaxt = "n",
ann = FALSE)
par(new = TRUE)
}
points(4,4, pch = 16)
points(4,10, pch = 16)
points(4,16, pch = 16)
points(10,4, pch = 16)
points(10,10, pch = 16)
points(10,16, pch = 16)
points(16,4, pch = 16)
points(16,10, pch = 16)
points(16,16, pch = 16)
}
white = function(x,y){
points(x,y,
cex = 3,
pch = 16,
col = "white")
}
black = function(x,y){
points(x,y,
cex = 3,
pch = 16,
col = "black")
}
updateboard = function(){
chessboard()
for(i in 1:19){
for(j in 1:19){
if(board[j,i] == 1){
black(j,i)
}else if(board[j,i] == 2){
white(j,i)
}
}
}
}
playchess = function(){
initialize_board()
n = 1
resign = FALSE
while(!resign){
b = ""
w = ""
if(round((n/2),0) != n/2){
b = as.character(readline(prompt = "Where do you want to put your black?: "))
x = as.numeric(unlist(strsplit(b,","))[1])
y = as.numeric(unlist(strsplit(b,","))[2])
board[x,y] = 1
}else if(round((n/2),0) == n/2){
w = as.character(readline(prompt = "Where do you want to put your white?: "))
x = as.numeric(unlist(strsplit(w,","))[1])
y = as.numeric(unlist(strsplit(w,","))[2])
board[x,y] = 2
}
n = n + 1
if(any(b == "resign", w == "resign")){
resign = TRUE
}
updateboard()
}
}
playchess()
board
initialize_board()
n = 1
resign = FALSE
while(!resign){
b = ""
w = ""
if(round((n/2),0) != n/2){
b = as.character(readline(prompt = "Where do you want to put your black?: "))
x = as.numeric(unlist(strsplit(b,","))[1])
y = as.numeric(unlist(strsplit(b,","))[2])
board[x,y] = 1
}else if(round((n/2),0) == n/2){
w = as.character(readline(prompt = "Where do you want to put your white?: "))
x = as.numeric(unlist(strsplit(w,","))[1])
y = as.numeric(unlist(strsplit(w,","))[2])
board[x,y] = 2
}
n = n + 1
if(any(b == "resign", w == "resign")){
resign = TRUE
}
updateboard()
}
initialize_board()
n = 1
resign = FALSE
while(!resign){
b = ""
w = ""
if(round((n/2),0) != n/2){
b = as.character(readline(prompt = "Where do you want to put your black?: "))
x = as.numeric(unlist(strsplit(b,","))[1])
y = as.numeric(unlist(strsplit(b,","))[2])
board[x,y] = 1
}else if(round((n/2),0) == n/2){
w = as.character(readline(prompt = "Where do you want to put your white?: "))
x = as.numeric(unlist(strsplit(w,","))[1])
y = as.numeric(unlist(strsplit(w,","))[2])
board[x,y] = 2
}
n = n + 1
if(any(nchar(b) == 6, nchar(w) == 6)){
resign = TRUE
}
updateboard()
}
rm(list = ls())
q(n)
initialize_board = function(){
board = vector()
for(i in 1:19){
board = cbind(board, rep(0,19))
}
board <<- as.matrix(board)
}
chessboard = function(){
windows()
par(bg = 'chocolate3')
for(i in 1:19){
plot(as.matrix(cbind(i,seq(1,19,1))),
xlim = c(1,19),
ylim = c(1,19),
xlab = " ",
ylab = " ",
type = "l",
xaxt = "n",
yaxt = "n",
ann = FALSE)
par(new = TRUE)
}
for(i in 1:19){
plot(as.matrix(cbind(seq(1,19,1),i)),
xlim = c(1,19),
ylim = c(1,19),
xlab = " ",
ylab = " ",
type = "l",
xaxt = "n",
yaxt = "n",
ann = FALSE)
par(new = TRUE)
}
points(4,4, pch = 16)
points(4,10, pch = 16)
points(4,16, pch = 16)
points(10,4, pch = 16)
points(10,10, pch = 16)
points(10,16, pch = 16)
points(16,4, pch = 16)
points(16,10, pch = 16)
points(16,16, pch = 16)
}
white = function(x,y){
points(x,y,
cex = 3,
pch = 16,
col = "white")
}
black = function(x,y){
points(x,y,
cex = 3,
pch = 16,
col = "black")
}
updateboard = function(){
chessboard()
for(i in 1:19){
for(j in 1:19){
if(board[j,i] == 1){
black(j,i)
}else if(board[j,i] == 2){
white(j,i)
}
}
}
}
chessboard()
board[3,3] = 2
updateboard()
initialize_board()
updateboard()
board[3,3] = 2
updateboard()
mousemove=function(x,y){system(paste0("xdotool mousemove ",x," ",y))}
mousemove(0,0)
mousemove(500,500)
mousemove(500,500)
library(xdotool info: http://tuxradar.com/content/xdotool-script-your-mouse
further )
library(xdotool)
library(plotly)
packageVersion('plotly')
library(shiny)
library(plotly)
library(shinythemes)
library(dplyr)
ui <- fluidPage(
# Set theme
theme = shinytheme("spacelab"),
# Some help text
h2("Coupled hover-events in plotly charts using Shiny"),
h4("This Shiny app showcases coupled hover-events using Plotly's ", tags$code("event_data()"), " function."),
# Vertical space
tags$hr(),
# Window length selector
selectInput("window", label = "Select Window Length", choices = c(10, 20, 30, 60, 90), selected = 10),
# Plotly Chart Area
fluidRow(
column(6, plotlyOutput(outputId = "timeseries", height = "600px")),
column(6, plotlyOutput(outputId = "correlation", height = "600px"))),
tags$hr(),
tags$blockquote("Hover over time series chart to fix a specific date. Correlation chart will update with historical
correlations (time span will be hover date +/- selected window length)")
)
# The easiest way to get ggplot2 is to install the whole tidyverse:
install.packages("tidyverse")
# Alternatively, install just ggplot2:
install.packages("ggplot2")
install.packages("tidyverse")
library(ggplot2)
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point()
str(mpg)
class(mpg)
?class
class(board)
class(black)
class(mpg)[2]
as.data.frame(mpg)
datampg = as.data.frame(mpg)
library(ggplot2)
ggplot(datampg, aes(displ, hwy, colour = class)) +
geom_point()
library(ggplot2)
ggplot(datampg, aes(displ, hwy, colour = class))
library(ggplot2)
ggplot(datampg, aes(displ, hwy, colour = class)) + geom_bar()
library(ggplot2)
ggplot(datampg, aes(displ, hwy, colour = class)) + geom_point()
library(ggplot2)
ggplot(datampg, aes(displ, hwy, colour = class)) + geom_point() + geom_boxplot()
library(ggplot2)
ggplot(datampg, aes(displ, hwy, colour = class)) geom_boxplot()
library(ggplot2)
ggplot(datampg, aes(displ, hwy, colour = class)) + geom_boxplot()
library(ggplot2)
ggplot(datampg, aes(displ, hwy, colour = class)) + geom_area()
update.packages()
installed.packages()
installed.packages()[12]
length(installed.packages())
rm(list = ls())
install.packages("tidyr")
q()
